'use strict';
var attributesHelper = require('./DynamoAttributesHelper');

/////////////
//firebase code
//////////////
/*

var firebase = require("firebase");

exports.handler = (event, context, callback) => {
    context.callbackWaitsForEmptyEventLoop = false;  //<---Important

    var config = {
        apiKey: "AIzaSyAOMCCWzHACsaO4FI9EcRJFO1S3a2g2i1s",
        authDomain: "hackdavis2017-fbda4.firebaseapp.com",
        databaseURL: "https://hackdavis2017-fbda4.firebaseio.com",
        storageBucket: "hackdavis2017-fbda4.appspot.com",
    };

    if(firebase.apps.length === 0) {   // <---Important!!! In lambda, it will cause double initialization.
        firebase.initializeApp(config);
    }


};
*/
/////////////////////////////////

module.exports = (function () {
    return {
        ':tell': function (speechOutput) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                shouldEndSession: true
            });
            this.emit(':responseReady');
        },
        ':ask': function (speechOutput, repromptSpeech) {
            if(this.isOverridden()) {
                return;
            }
            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':askWithCard': function(speechOutput, repromptSpeech, cardTitle, cardContent, imageObj) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                cardTitle: cardTitle,
                cardContent: cardContent,
                cardImage: imageObj,
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':tellWithCard': function(speechOutput, cardTitle, cardContent, imageObj) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                cardTitle: cardTitle,
                cardContent: cardContent,
                cardImage: imageObj,
                shouldEndSession: true
            });
            this.emit(':responseReady');
        },
        ':tellWithLinkAccountCard': function(speechOutput) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                cardType: 'LinkAccount',
                shouldEndSession: true
            });
            this.emit(':responseReady');
        },
        ':askWithLinkAccountCard': function(speechOutput, repromptSpeech) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                cardType: 'LinkAccount',
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':responseReady': function () {
            if (this.isOverridden()) {
                return;
            }

            if(this.handler.state) {
                this.handler.response.sessionAttributes['STATE'] = this.handler.state;
            }

            if (this.handler.dynamoDBTableName) {
                return this.emit(':saveState');
            }

            this.context.succeed(this.handler.response);
        },
        ':saveState': function(forceSave) {
            if (this.isOverridden()) {
                return;
            }

            if(forceSave && this.handler.state){
                this.attributes['STATE'] = this.handler.state;
            }

            var userId = '';

            // Long-form audio enabled skills use event.context
            if (this.event.context) {
                userId = this.event.context.System.user.userId;
            } else if (this.event.session) {
                userId = this.event.session.user.userId;
            }

            if(this.saveBeforeResponse || forceSave || this.handler.response.response.shouldEndSession) {
                attributesHelper.set(this.handler.dynamoDBTableName, userId, this.attributes,
                    (err) => {
                        if(err) {
                            return this.emit(':saveStateError', err);
                        }

                        // To save the state when AudioPlayer Requests come without sending a response.
                        if (Object.keys(this.handler.response).length === 0 && this.handler.response.constructor === Object) {
                            this.handler.response =  true;
                        }

                        this.context.succeed(this.handler.response);
                    });
            } else {
                this.context.succeed(this.handler.response || true);
            }
        },
        ':saveStateError': function(err) {
            if(this.isOverridden()) {
                return;
            }
            console.log(`Error saving state: ${err}\n${err.stack}`);
            this.context.fail(err);
        }
    };
})();

function createSpeechObject(optionsParam) {
    if (optionsParam && optionsParam.type === 'SSML') {
        return {
            type: optionsParam.type,
            ssml: optionsParam['speech']
        };
    } else {
        return {
            type: optionsParam.type || 'PlainText',
            text: optionsParam['speech'] || optionsParam
        };
    }
}

function buildSpeechletResponse(options) {
    var alexaResponse = {
        outputSpeech: createSpeechObject(options.output),
        shouldEndSession: options.shouldEndSession
    };

    if (options.reprompt) {
        alexaResponse.reprompt = {
            outputSpeech: createSpeechObject(options.reprompt)
        };
    }

    if (options.cardTitle && options.cardContent) {
        alexaResponse.card = {
            type: 'Simple',
            title: options.cardTitle,
            content: options.cardContent
        };

        if(options.cardImage && (options.cardImage.smallImageUrl || options.cardImage.largeImageUrl)) {
            alexaResponse.card.type = 'Standard';
            alexaResponse.card['image'] = {};

            delete alexaResponse.card.content;
            alexaResponse.card.text = options.cardContent;

            if(options.cardImage.smallImageUrl) {
                alexaResponse.card.image['smallImageUrl'] = options.cardImage.smallImageUrl;
            }

            if(options.cardImage.largeImageUrl) {
                alexaResponse.card.image['largeImageUrl'] = options.cardImage.largeImageUrl;
            }
        }
    } else if (options.cardType === 'LinkAccount') {
        alexaResponse.card = {
            type: 'LinkAccount'
        };
    }

    var returnResult = {
        version: '1.0',
        response: alexaResponse
    };

    if (options.sessionAttributes) {
        returnResult.sessionAttributes = options.sessionAttributes;
    }
    return returnResult;
}

// TODO: check for ssml content in card
function getSSMLResponse(message) {

    var msg = message;
    var patt = new RegExp("[0-9]");
    var msg_arr = msg.split(" ");
    var response = "";

/*
    ///////firebase querying code
    if(msg.includes("$PREF")){
      //find preference token
      //format: $PREF preference
      for(var i = 0; i < msg_arr.length;i++){
        if(msg_arr[i].includes("$PREF"))
          var preference = msg_arr[i+1];
          if( i+2 <= msg_arr.length && msg_arr[i+2].includes("lifting")){
            preference += " " + msg_arr[i+2];
          }
      }

      var users;
      var ref = firebase.database().ref("users"); //TODO view firebase
      ref.orderByChild("workout").equalTo(preference).on("child_added", function(snapshot) {
          users += snapshot.key + ", "  });

      return {
        type: 'SSML',
        speech: `<speak> test str </speak>`
      };

    }//end if pref
    ///////////////////////////////
*/
    if(msg.includes("$HARD")){
        for(var i = 0; i < msg_arr.length; i++){
          if(msg_arr[i].includes("$HARD")) 
            continue;
          if(patt.test(msg_arr[i]) && i+1 != msg_arr.length && i%3 == 0){
            
            response += msg_arr[i] + " and hold for 10 seconds <break time = \"10s\"/> ";
          }
          else{
              response += msg_arr[i] + " ";
              if(patt.test(msg_arr[i]))
                response += ". ";
            }
        }

    }
    else if(msg.includes("$MEDIUM")){
        for(var i = 0; i < msg_arr.length; i++){
            if(msg_arr[i].includes("$MEDIUM")) 
                continue;
            if(patt.test(msg_arr[i]) && i+1 != msg_arr.length){
              response += msg_arr[i] + " <break time = \"1s\"/> ";
            if(i%5==0) response += " now hold for five seconds <break time = \"5s\"/> ";
            }
            else{
              response += msg_arr[i] + " ";
              if(patt.test(msg_arr[i]))
                response += ". ";
            }
      }
    }
    else if(msg.includes("$RANDOM_PHRASE")){
        var phrases =["im doing great today!","im great and looking forward to working out with you today","I feel good and I can't wait to work out with you today","im great and ready to get you fit today!"];
        return{
            type: 'SSML',
            speech: `<speak> ${phrases[Math.floor(Math.random()*phrases.length)]} </speak>`
        };
    }
    else{ //unspecified or easy
     for(var i = 0; i < msg_arr.length; i++){
        if(msg_arr[i].includes("$EASY"))
            continue;
        if(patt.test(msg_arr[i]) && i+1 != msg_arr.length){

          response += msg_arr[i] + " <break time = \"1s\"/> ";
        }
        else
          response += msg_arr[i] + " ";
      }
    }//end else

    return {
            type: 'SSML',
            speech: `<speak> ${response}</speak>`
        };
}